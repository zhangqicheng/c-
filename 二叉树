#include "stdio.h"
#include "malloc.h"

typedef char ElemType;

typedef struct BiTNode{
	ElemType data;
	struct BiTNode *lchild,*rchild;
}BiTNode,*BiTree;

//创建一棵二叉树--递归创建--约定输入为先序遍历输入
void CreateBiTree(BiTree &T){
	char c;
	scanf("%c",&c);
	if(c=='#'){
		T=NULL;
	}
	else{
		T=(BiTree)malloc(sizeof(BiTNode));
		T->data=c;
		CreateBiTree(T->lchild);
		CreateBiTree(T->rchild);
	}
}

//自定义visit函数
void visit(char c,int level){
	printf("%c位于第%d层\n",c,level);
}

//前序遍历二叉树
void Preordertraverse(BiTree &T,int level){
	if(T){
		visit(T->data,level);
		Preordertraverse(T->lchild,level+1);
		Preordertraverse(T->rchild,level+1);
	}
}

//中序遍历二叉树
void Midordertraverse(BiTree &T,int level){
	if(T){
		Midordertraverse(T->lchild,level+1);
		visit(T->data,level);
		Midordertraverse(T->rchild,level+1);
	}
}

//后序遍历二叉树
void Laterordertraverse(BiTree &T,int level){
	if(T){
		Laterordertraverse(T->lchild,level+1);
		Laterordertraverse(T->rchild,level+1);
		visit(T->data,level);
	}
}

void main(){
	int level=1;
	BiTree T=NULL;
	CreateBiTree(T);
	printf("前序遍历\n");
	Preordertraverse(T,level);
	printf("中序遍历\n");
	Midordertraverse(T,level);
	printf("后序遍历\n");
	Laterordertraverse(T,level);
}
